var React = require('react/addons'),
    d3= require('d3'),
    _ = require('lodash');

var COLORS =  [ '#64BCBB', '#D9D9D9' ],
    RADIUS = 50;

var Radial = React.createClass({
    propTypes: {
        percent: React.PropTypes.number,
        icon: React.PropTypes.string //Maybe renderable
    },
    shouldComponentUpdate: function() {
        return false;
    },
    getNumericPercent: function() {
        return this.props.percent;
    },
    formatPercent: function() {
        return (Math.ceil(this.getNumericPercent() * 100) + '%');
    },
    componentDidMount: function() {
        this.renderSvg(this.refs.svg.getDOMNode(), this.getNumericPercent());
    },
    componentWillReceiveProps: function(nextProps) {
        this.animatePercent(nextProps.percent);
    },
    renderSvg: function(node, percent) {
        this.svg = d3.select(node).append("svg")
          .attr("width", "100")
          .attr("height", "100")
        .append("g")
          .attr("transform", "translate("+RADIUS+","+RADIUS+")");

        this.animatePercent(percent)
    },
    animatePercent: function(percent) {
        var showPercent = d3.min([percent, 1.0]),
            pie = d3.layout.pie().sort(null),
            thickness = RADIUS / 5,
            arc = d3.svg.arc().innerRadius(RADIUS - 5 - thickness).outerRadius(RADIUS - 5);
        
        this.svg.selectAll("path")
            .data( pie([showPercent, 1.0-showPercent]) )
            .enter().append("path")
            .attr("fill", function(d, i) { return COLORS[ (i % COLORS.length) ]} )
            .transition().duration(1000).ease('cubic')
            .attrTween("d", function(b) {
                var i = d3.interpolate({startAngle: 0, endAngle: 2*Math.PI}, b);
                return function(t) { return arc(i(t)); };
            });
    },
    getIconStyle: function() {
        var half = RADIUS / 2;
          return {
            width: RADIUS + 'px',
            height: RADIUS + 'px',
            marginTop: (0-RADIUS) + 'px',
            position: 'relative',
            top: (RADIUS + half) + 'px',
            left: (RADIUS - half) + 'px'
          }
    },    
    render: function() {
        return (
            <div {...this.props}>
                <div className="radial">
                    <div className={this.props.icon} style={this.getIconStyle()} />
                    <div ref="svg"></div>
                </div>
                <div className="percent text-center">
                    {this.formatPercent()}
                </div>
                <div className="title text-center">
                    {this.props.children}
                </div>
            </div>
        )
    }
});

module.exports = Radial;